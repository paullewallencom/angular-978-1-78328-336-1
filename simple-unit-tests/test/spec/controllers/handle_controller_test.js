// handle_controller_test.js
// monolithic test suite for HandleCtrl

describe('Controller: HandleCtrl', function() {
  // the components to be tested reside in the myApp module
  // therefore it must be injected
  beforeEach(module('myApp'));

  // values which will be used in multiple closures
  var HandleCtrl, scope, httpBackend, createEndpointExpectation;

  // this will be run before each it(function() {}) clause
  // to create or refresh the involved components
  beforeEach(inject(function($controller, $rootScope, $httpBackend) {

    // creates the mock backend server
    httpBackend = $httpBackend

    // creates a fresh scope
    scope = $rootScope.$new();

    // creates a new controller instance and inserts
    // the created scope into it
    HandleCtrl = $controller('HandleCtrl', {
      $scope: scope
    });

    // configures the httpBackend to match outgoing requests
    // that are expected to be generated by the controller
    // and return payloads based on what the request contained;
    // this will only be invoked when needed
    createEndpointExpectation = function() {
      // URL matching utilizes a simple regex here
      // expectGET requires that a request be created
      httpBackend.expectGET(/\/api\/handle\/\w+/i).respond(
        function(method, url, data, headers){
          var urlComponents = url.split("/")
            , handle = urlComponents[urlComponents.length - 1]
            , payload = {handle: handle};
          if (handle == 'jakehsu') {
            // handle exists in database, return ID
            payload.id = 1
          } else {
            // handle does not exist in database
            payload.id = null

          };

          // AngularJS allows for this return format;
          // [status code, data, configuration]
          return [200, payload, {}];
        }
      );
    };
  }));

  // configures the httpBackend to check that the mock
  // server did not receive extra requests or did not
  // see a request when it should have expected one
  afterEach(function() {

    // verify that all expect<HTTPverb>() expectations were filled
    httpBackend.verifyNoOutstandingExpectation();

    // verify that the mock server did not receive requests it
    // was not expecting
    httpBackend.verifyNoOutstandingRequest();
  });

  // client invalidation unit test
  it('Should mark handles which are too short as invalid', 
    function() {
      // attempt test handle beneath the character count floor
      scope.handle = 'jake';

      // $watch will not be run until you force a digest loop
      scope.$apply();

      // this clause must be fulfilled for the test to pass
      expect(scope.valid).toBe(false);
    }
  );

  // client validation, server invalidation unit test
  it('Should mark handles which exist on the server as invalid', 
    function() {
      // server is set up to expect a specific request
      createEndpointExpectation();

      // attempt test handle above character count floor,
      // but which is defined in the mock server to have already
      // been taken
      scope.handle = 'jakehsu';

      // force a digest loop
      scope.$apply();

      // the mock server will not return a response until 
      // flush() is invoked
      httpBackend.flush();

      // this clause must be fulfilled for the test to pass
      expect(scope.valid).toBe(false);
    }
  );

  // client validation, server invalidation unit test
  it('Should mark handles available on the server as valid', 
    function() {

      // server is set up to expect a specific request
      createEndpointExpectation();

      // attempt handle above character floor and
      // which is defined to be available on the mock server
      scope.handle = 'jakehsu123';

      // force a digest loop
      scope.$apply();

      // return a response
      httpBackend.flush();

      // this clause must be fulfilled for the test to pass
      expect(scope.valid).toBe(true);
    }
  )
});